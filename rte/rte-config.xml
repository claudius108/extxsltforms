<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (C) 2010 kuberam.ro - Claudius Teodorescu. All rights reserved.
    Released under LGPL License - http://gnu.org/licenses/lgpl.html.
-->
<rteConfigOptions>
	<editor type="YUIEditor">
		<!--set the URI to the YUI folder-->
		<initialize>
	<!-- 		<script src="http://yui.yahooapis.com/2.8.1/build/yuiloader/yuiloader-min.js">/* */</script> -->			
			<script type="text/javascript" src="../../../utils/yui/build/yuiloader/yuiloader.js">/* */</script>
			<script type="text/javascript">
				<![CDATA[
					function generateYUIeditors() {
						exsltforms.utils.pollingConditions[ 'generateYUIEditors' ] = {
							testedValue: function() { return (typeof YAHOO.widget.EditorInfo != 'undefined') },
							executedFunction: function() {
								exsltforms.rte.generateEditors( 'YUIEditor' );
							}
						}
						exsltforms.utils.poll( 'generateYUIEditors' );
					}
					//set the base value = URI to the 'build' folder within YUI folder
					var YUIloader = new YAHOO.util.YUILoader( { require: [ 'editor' ], base: '../../../utils/yui/build/' } );
					//var YUIloader = new YAHOO.util.YUILoader( { require: [ 'editor' ], base: 'http://yui.yahooapis.com/2.8.1/build/' } );
					YUIloader.onSuccess = generateYUIeditors;
					YUIloader.insert();
				]]>
			</script>
		</initialize>
	</editor>
	<editor type="CKEditor">
		<!-- set the URI to the CKEditor -->
		<initialize>
			<script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/ckeditor/4.0.1/ckeditor.js ">/* */</script>
		</initialize>
	</editor>
	<editor type="EditArea">
		<!--set the URI to the EditArea folder-->
		<initialize>
			<script type="text/javascript" src="../../../utils/editarea/edit_area/edit_area_full.js">/* */</script>
		</initialize>
	</editor>
	<editor type="DojoEditor">
		<!-- set the URI to the Dojo -->
		<initialize>
			<link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/dojo/1.8.3/dijit/themes/tundra/tundra.css" />
			<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/dojo/1.8.3/dojo/dojo.js">/* */</script>
			<script type="text/javascript">
				dojo.addOnLoad(function() { dojo.require("dijit.Editor"); });
			</script>
			<script type="text/javascript">
				<![CDATA[
					dojo.addOnLoad(function() {
						exsltforms.utils.pollingConditions[ 'generateDojoEditors' ] = {
							testedValue: function() { return exsltforms.utils.pollTestedValues[ 'textarea2rte_registered' ] },
							executedFunction: function() {
								for (var editorID in exsltforms.registry.textarea2rte) {
								if (exsltforms.registry.textarea2rte[ editorID ].editorType == 'DojoEditor') {
									exsltforms.rte.specificFunctions[exsltforms.registry.textarea2rte[editorID].editorType].beforeRendering(exsltforms.registry.textarea2rte[editorID].nativeConfigOptionsObject);
										new dijit.Editor(exsltforms.registry.textarea2rte[ editorID ].nativeConfigOptionsObject, dojo.byId(editorID));
										dojo.connect(dijit.byId(editorID), "onBlur", function(editorContent) {exsltforms.rte.generalFunctions.saveEditorContent(this.id, dijit.registry._hash[this.id].document.activeElement.innerHTML);});
										if (exsltforms.registry.textarea2rte[editorID].incremental == 'true') {
											dojo.connect(dijit.byId(editorID), "onNormalizedDisplayChanged", function(event) {exsltforms.rte.generalFunctions.saveEditorContent(this.id, dijit.registry._hash[this.id].document.activeElement.innerHTML);});
										}
										exsltforms.rte.generalFunctions.addXFupdateListener(editorID);
									}
								}
							}
						}
						exsltforms.utils.poll('generateDojoEditors');
					});
				]]>
			</script>
		</initialize>
	</editor>
	<editor type="TinyMCE">
		<!--set the URI to the TinyMCE folder-->
		<initialize>
	<!-- 		<script type="text/javascript" src="http://tinymce.moxiecode.com/js/tinymce/jscripts/tiny_mce/tiny_mce.js">/* */</script> -->
			<script type="text/javascript" src="../../../utils/tinymce/jscripts/tiny_mce/tiny_mce.js">/* */</script>
		</initialize>
	</editor>
	<editor type="Xinha">
		<initialize>
			<script type="text/javascript">
				_editor_url  = "../../../utils/xinha/"  //(preferably absolute) URL (including trailing slash) where Xinha is installed
				//_editor_url  = "http://xinha.raimundmeyer.de/latest/"
				_editor_lang = "en";     //And the language we need to use in the editor.
			</script>
			<script type="text/javascript" src="../../../utils/xinha/XinhaLoader.js">/* */</script>
<!-- 			<script type="text/javascript" src="http://xinha.raimundmeyer.de/latest/XinhaLoader.js">/* */</script> -->
			<script type="text/javascript">
				<![CDATA[
					 //exsltforms.rte.specificFunctions[ exsltforms.registry.textarea2rte[ editorID ].editorType ].beforeRendering( exsltforms.registry.textarea2rte[ editorID ].nativeConfigOptionsObject );
					xinha_editors = [];
					xinha_editorIDs = [];
					xinha_allPlugins = [];
					
					xinha_generateConfigOptions = function() {
						for ( var editorID in exsltforms.registry.textarea2rte ) {
							xinha_editorIDs.push( editorID );
							xinha_allPlugins = xinha_allPlugins.concat( exsltforms.registry.textarea2rte[ editorID ].nativeConfigOptionsObject.plugins );
						}
					}
	
					xinha_init = function() {
						if( !Xinha.loadPlugins( xinha_allPlugins, xinha_init ) ) return;
						xinha_config = new Xinha.Config();
					
						xinha_editors = Xinha.makeEditors( xinha_editorIDs,  xinha_config );
						
						exsltforms.registry.plugins[ 'Xinha' ] = {};
						exsltforms.registry.plugins.Xinha[ 'lastXinhaEditorID' ] = '';
	
						// register plugins and configOptions to each editor
						for ( var editorID in exsltforms.registry.textarea2rte ) {
							var editor = xinha_editors[ editorID ];
							editor.registerPlugins( exsltforms.registry.textarea2rte[ editorID ].nativeConfigOptionsObject.plugins );
							exsltforms.rte.generalFunctions.addXFupdateListener( editorID );						
	
							for ( var configOption in exsltforms.registry.textarea2rte[ editorID ].nativeConfigOptionsObject.configOptions ) {
								editor.config[ configOption ] = exsltforms.registry.textarea2rte[ editorID ].nativeConfigOptionsObject.configOptions[ configOption ];
							}
							exsltforms.registry.plugins.Xinha.lastXinhaEditorID = editorID;
						}
				
						Xinha.startEditors( xinha_editors );
					}
					
					// register events to each editor
					xinha_attachEvents = function() {
						for ( var editorID in exsltforms.registry.textarea2rte ) {
							var editor = xinha_editors[ editorID ];
							editor._doc.activeElement.id = editorID;
							if ( exsltforms.registry.textarea2rte[ editorID ].incremental == 'true' ) {
								editor.config.Events[ 'onKeyPress' ] = function ( event ) { exsltforms.rte.generalFunctions.saveEditorContent( editor._doc.activeElement.id, this._doc.activeElement.innerHTML ); }
							}
							Xinha._addEvent( editor._iframe, 'blur', function(){ exsltforms.rte.generalFunctions.saveEditorContent( this.contentDocument.activeElement.id, this.contentDocument.activeElement.innerHTML ); } ); // IE
							Xinha._addEvent( editor._doc, 'blur',    function(){ exsltforms.rte.generalFunctions.saveEditorContent( this.activeElement.id, this.activeElement.innerHTML ); } ); // GECKO 
						}
					}

					Xinha._addEvent( window,'load', xinha_generateConfigOptions );
					Xinha._addEvent( window,'load', xinha_init );
					
					exsltforms.utils.pollingConditions[ 'xinha_attachEvents' ] = {
						testedValue: function() {
							var lastXinhaEditorID = xinha_editorIDs[ xinha_editorIDs.length - 1];
							return ( xinha_editors && xinha_editors[ 'Xinha_0' ] && xinha_editors[ 'Xinha_0' ]._doc && xinha_editors[ 'Xinha_0' ]._doc.body )
							},
							executedFunction: function() { xinha_attachEvents(); }
					}
					exsltforms.utils.poll( 'xinha_attachEvents' );
				]]>
			</script>
		</initialize>
	</editor>
</rteConfigOptions>