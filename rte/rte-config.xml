<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (C) 2010 kuberam.ro - Claudius Teodorescu. All rights reserved. Released under LGPL License - http://gnu.org/licenses/lgpl.html. -->
<rteConfigOptions>
	<editor type="YUIEditor">
		<!--set the URI to the YUI folder -->
		<initialize>
			<script type="text/javascript" src="http://yui.yahooapis.com/2.8.1/build/yuiloader/yuiloader-min.js">/* */</script>
			<script type="text/javascript">
				<![CDATA[
					function generateYUIeditors() {
						exsltforms.utils.pollingConditions['generateYUIEditors'] = {
							testedValue: function() {return (typeof YAHOO.widget.EditorInfo != 'undefined')},
							executedFunction: function() {
								exsltforms.rte.generateEditors('YUIEditor');
							}
						}
						exsltforms.utils.poll('generateYUIEditors');
					}
					//set the base value = URI to the 'build' folder within YUI folder
					var YUIloader = new YAHOO.util.YUILoader({require: ['editor'], base: 'http://yui.yahooapis.com/2.8.1/build/'});
					YUIloader.onSuccess = generateYUIeditors;
					YUIloader.insert();
				]]>
			</script>
		</initialize>
	</editor>
	<editor type="CKEditor">
		<!-- set the URI to the CKEditor -->
		<initialize>
			<script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/ckeditor/4.0.1/ckeditor.js ">/* */</script>
		</initialize>
	</editor>
	<editor type="EditArea">
		<!--set the URI to the EditArea folder -->
		<initialize>
			<script type="text/javascript" src="http://cdolivet.com/editarea/editarea/edit_area/edit_area_full.js">/* */</script>
		</initialize>
	</editor>
	<editor type="DojoEditor">
		<!-- set the URI to the Dojo -->
		<initialize>
			<link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/dojo/1.8.3/dijit/themes/tundra/tundra.css" />
			<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/dojo/1.8.3/dojo/dojo.js">/* */</script>
			<script type="text/javascript">
				dojo.addOnLoad(function() { dojo.require("dijit.Editor"); });
			</script>
			<script type="text/javascript">
				<![CDATA[
					document.body.className += ' tundra';
					dojo.addOnLoad(function() {
						exsltforms.utils.pollingConditions[ 'generateDojoEditors' ] = {
							testedValue: function() { return exsltforms.utils.pollTestedValues['textarea2rte_registered'] },
							executedFunction: function() {
								for (var editorId in exsltforms.registry.textarea2rte) {
								if (exsltforms.registry.textarea2rte[ editorId ].editorType == 'DojoEditor') {
									exsltforms.rte.specificFunctions[exsltforms.registry.textarea2rte[editorId].editorType].beforeRendering(exsltforms.registry.textarea2rte[editorId].nativeConfigOptionsObject);
										new dijit.Editor(exsltforms.registry.textarea2rte[ editorId ].nativeConfigOptionsObject, dojo.byId(editorId));
										dojo.connect(dijit.byId(editorId), "onBlur", function(editorContent) {exsltforms.rte.generalFunctions.saveEditorContent(this.id, dijit.registry._hash[this.id].document.activeElement.innerHTML);});
										if (exsltforms.registry.textarea2rte[editorId].incremental == 'true') {
											dojo.connect(dijit.byId(editorId), "onNormalizedDisplayChanged", function(event) {exsltforms.rte.generalFunctions.saveEditorContent(this.id, dijit.registry._hash[this.id].document.activeElement.innerHTML);});
										}
										exsltforms.rte.generalFunctions.addXFupdateListener(editorId);
									}
								}
							}
						}
						exsltforms.utils.poll('generateDojoEditors');
					});
				]]>
			</script>
		</initialize>
	</editor>
	<editor type="Xinha">
		<initialize>
			<script type="text/javascript">
				_editor_url = "../resources/xinha/" //(preferably absolute) URL (including trailing slash) where Xinha is installed
				_editor_lang = "en"; //And the language we need to use in the editor.
			</script>
			<script type="text/javascript" src="../resources/xinha/XinhaLoader.js">/* */</script>
			<script type="text/javascript">
				<![CDATA[
					xinha_editorIds = [];
					xinha_editors = [];
					
					xinha_preinit = function() {
						xinha_editors = [];
						xinha_plugins = [];
						//generate config options						
						for (var editorId in exsltforms.registry.textarea2rte) {						
							xinha_editorIds.push(editorId);
							xinha_plugins = xinha_plugins.concat(exsltforms.registry.textarea2rte[editorId].nativeConfigOptionsObject.plugins);
						}
												
						if(!Xinha.loadPlugins(xinha_plugins, xinha_init)) return;						
						xinha_init();
					}
					
					xinha_init = function() {				
						xinha_config = new Xinha.Config();
						xinha_editors = Xinha.makeEditors(xinha_editorIds, xinha_config);						
												
						exsltforms.registry.plugins['Xinha'] = {};
						exsltforms.registry.plugins.Xinha['latestXinhaEditorId'] = '';
	
						// register plugins and configOptions to each editor
						for (var editorId in exsltforms.registry.textarea2rte) {
							var editor = xinha_editors[editorId];
							//editor.registerPlugins(exsltforms.registry.textarea2rte[editorId].nativeConfigOptionsObject.plugins);
							exsltforms.rte.generalFunctions.addXFupdateListener(editorId);						
	
							for (var configOption in exsltforms.registry.textarea2rte[editorId].nativeConfigOptionsObject.configOptions) {
								editor.config[configOption] = exsltforms.registry.textarea2rte[editorId].nativeConfigOptionsObject.configOptions[configOption];
							}
							exsltforms.registry.plugins.Xinha.latestXinhaEditorId = editorId;
						}
		
						Xinha.startEditors(xinha_editors);
					}
					
					// register events to each editor
					xinha_attachEvents = function() {
						for (var editorId in exsltforms.registry.textarea2rte) {
							var editor = xinha_editors[editorId];
							editor._doc.activeElement.id = editorId;
							if (exsltforms.registry.textarea2rte[editorId].incremental == 'true') {
								editor.config.Events['onKeyPress'] = function(event) {exsltforms.rte.generalFunctions.saveEditorContent(editor._doc.activeElement.id, this._doc.activeElement.innerHTML );}
							}
							Xinha._addEvent(editor._iframe, 'blur', function(){exsltforms.rte.generalFunctions.saveEditorContent(this.contentDocument.activeElement.id, this.contentDocument.activeElement.innerHTML);}); // IE
							Xinha._addEvent(editor._doc, 'blur', function(){exsltforms.rte.generalFunctions.saveEditorContent(this.activeElement.id, this.activeElement.innerHTML);}); // GECKO 
						}
					}

					Xinha._addEvent(window,'load', xinha_preinit);
					
					exsltforms.utils.pollingConditions[ 'xinha_attachEvents' ] = {
						testedValue: function() {
							var latestXinhaEditorId = xinha_editorIds[xinha_editorIds.length - 1];
							return (xinha_editors && xinha_editors[latestXinhaEditorId] && xinha_editors[latestXinhaEditorId]._doc && xinha_editors[latestXinhaEditorId]._doc.body)
							},
							executedFunction: function() {xinha_attachEvents();}
					}
					exsltforms.utils.poll('xinha_attachEvents');
				]]>
			</script>			
		</initialize>
	</editor>
</rteConfigOptions>
